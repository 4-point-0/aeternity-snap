export enum Encoding {
  KeyBlockHash = "kh",
  MicroBlockHash = "mh",
  BlockPofHash = "bf",
  BlockTxHash = "bx",
  BlockStateHash = "bs",
  Channel = "ch",
  ContractAddress = "ct",
  ContractBytearray = "cb",
  ContractStoreKey = "ck",
  ContractStoreValue = "cv",
  Transaction = "tx",
  TxHash = "th",
  OracleAddress = "ok",
  OracleQuery = "ov",
  OracleQueryId = "oq",
  OracleResponse = "or",
  AccountAddress = "ak",
  Signature = "sg",
  Commitment = "cm",
  PeerPubkey = "pp",
  Name = "nm",
  State = "st",
  Poi = "pi",
  StateTrees = "ss",
  CallStateTree = "cs",
  Bytearray = "ba",
}

const base58Types = [
  Encoding.KeyBlockHash,
  Encoding.MicroBlockHash,
  Encoding.BlockPofHash,
  Encoding.BlockTxHash,
  Encoding.BlockStateHash,
  Encoding.Channel,
  Encoding.ContractAddress,
  Encoding.TxHash,
  Encoding.OracleAddress,
  Encoding.OracleQueryId,
  Encoding.AccountAddress,
  Encoding.Signature,
  Encoding.Commitment,
  Encoding.PeerPubkey,
  Encoding.Name,
] as const;

const base64Types = [
  Encoding.ContractBytearray,
  Encoding.ContractStoreKey,
  Encoding.ContractStoreValue,
  Encoding.Transaction,
  Encoding.OracleQuery,
  Encoding.OracleResponse,
  Encoding.State,
  Encoding.Poi,
  Encoding.StateTrees,
  Encoding.CallStateTree,
  Encoding.Bytearray,
] as const;

const byteSizeForType = {
  [Encoding.KeyBlockHash]: 32,
  [Encoding.MicroBlockHash]: 32,
  [Encoding.BlockPofHash]: 32,
  [Encoding.BlockTxHash]: 32,
  [Encoding.BlockStateHash]: 32,
  [Encoding.Channel]: 32,
  [Encoding.ContractAddress]: 32,
  [Encoding.TxHash]: 32,
  [Encoding.OracleAddress]: 32,
  [Encoding.OracleQueryId]: 32,
  [Encoding.AccountAddress]: 32,
  [Encoding.Signature]: 64,
  [Encoding.Commitment]: 32,
  [Encoding.PeerPubkey]: 32,
  [Encoding.State]: 32,
} as const;
